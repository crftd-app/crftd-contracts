// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "src/lib/VRFConsumerV2.sol";
import {CRFTDRegistry} from "src/CRFTDRegistry.sol";
import {CollablandProxy} from "src/lib/CollablandProxy.sol";
import {CRFTDMarketplace} from "src/CRFTDMarketplace.sol";
import {CRFTDStakingToken as CRFTDStakingTokenRoot} from "src/CRFTDStakingTokenRoot.sol";
import {CRFTDStakingToken as CRFTDStakingTokenChild} from "src/CRFTDStakingTokenChild.sol";
import {CRFTDStakingTokenV1} from "src/legacy/CRFTDStakingToken.sol";

import {WETH} from "solmate/tokens/WETH.sol";
import {UUPSUpgrade} from "UDS/proxy/UUPSUpgrade.sol";
import {ERC1967Proxy} from "UDS/proxy/ERC1967Proxy.sol";
import {UpgradeScripts} from "upgrade-scripts/UpgradeScripts.sol";

import {MockERC721} from "../test/mocks/MockERC721.sol";

import "forge-std/Script.sol";
import "forge-std/Test.sol";

import {SetupBase} from "./SetupBase.sol";

/* 
# Anvil
source .env && forge script simulate --rpc-url $RPC_ANVIL --private-key $PRIVATE_KEY_ANVIL -vvvv --ffi --broadcast

# Mumbai
source .env && forge script simulate --rpc-url $RPC_MUMBAI  --private-key $PRIVATE_KEY --verify --etherscan-api-key $POLYGONSCAN_KEY -vvvv  --ffi --broadcast

# Polygon
source .env && US_DRY_RUN=true forge script simulate --rpc-url $RPC_POLYGON --private-key $PRIVATE_KEY_CRFTD -vvvv --ffi
source .env && forge script simulate --rpc-url $RPC_POLYGON  --private-key $PRIVATE_KEY_CRFTD --verify --etherscan-api-key $POLYGONSCAN_KEY -vvvv --ffi --broadcast

# MAINNET
source .env && US_DRY_RUN=true forge script simulate --rpc-url $RPC_MAINNET --private-key $PRIVATE_KEY_CRFTD -vvvv --ffi
source .env && forge script simulate --rpc-url $RPC_MAINNET --private-key $PRIVATE_KEY_CRFTD --verify --etherscan-api-key $ETHERSCAN_KEY -vvvv --ffi --broadcast

# Goerli
source .env && US_DRY_RUN=true forge script simulate --rpc-url $RPC_GOERLI --private-key $PRIVATE_KEY -vvvv --ffi
source .env && forge script simulate --rpc-url $RPC_GOERLI --private-key $PRIVATE_KEY --verify --etherscan-api-key $ETHERSCAN_KEY -vvvv --ffi --broadcast 

cp ~/git/eth/crftd-staking/out/CRFTDRegistry.sol/CRFTDRegistry.json ~/git/eth/crftd-web/data/abi
cp ~/git/eth/crftd-staking/out/CRFTDMarketplace.sol/CRFTDMarketplace.json ~/git/eth/crftd-web/data/abi
cp ~/git/eth/crftd-staking/out/CRFTDStakingTokenRoot.sol/CRFTDStakingToken.json ~/git/eth/crftd-web/data/abi/CRFTDStakingTokenRoot.json
cp ~/git/eth/crftd-staking/out/CRFTDStakingTokenChild.sol/CRFTDStakingToken.json ~/git/eth/crftd-web/data/abi/CRFTDStakingTokenChild.json
cp ~/git/eth/crftd-staking/deployments/80001/deploy-latest.json ~/git/eth/crftd-web/data/deployments_80001.json
cp ~/git/eth/crftd-staking/deployments/137/deploy-latest.json ~/git/eth/crftd-web/data/deployments_137.json
cp ~/git/eth/crftd-staking/deployments/5/deploy-latest.json ~/git/eth/crftd-web/data/deployments_5.json
cp ~/git/eth/crftd-staking/deployments/1/deploy-latest.json ~/git/eth/crftd-web/data/deployments_1.json
//*/

contract simulate is Script {
    function run() external {
        // vm.startBroadcast();

        vm.prank(0xE7da73d1F2e44fD16717C021E81Dc96341aF141B);

        // console.log("msg.sender", msg.sender);
        address(0x658108fc6ca4FC8B0937a451AC52313270384C24).call{gas: 38039}(
            hex"ac9650d8000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000002e4c9a3911e000000000000000000000000e7769fbf6d4625bed5f0a8ba5b39b5141bb9ecb000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000f000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001300000000000000000000000000000000000000000000000000000000000000150000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001700000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000184c9a3911e000000000000000000000000e7769fbf6d4625bed5f0a8ba5b39b5141bb9ec7600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001d000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000001f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000023000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000"
        );
    }
}
